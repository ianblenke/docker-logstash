#!/bin/bash

# Fail fast, including pipelines
set -eo pipefail

# Set LOGSTASH_TRACE to enable debugging
[[ $LOGSTASH_TRACE ]] && set -x

LOGSTASH_CONFIG_FILE="/opt/logstash.conf"

# Generate config file from oneline "property" list format if present
if [ -n "$LOGSTASH_CONFIG_ONELINE" ]; then
  previous=()
  (
    IFS=';'
    list=$LOGSTASH_CONFIG_ONELINE
    for var in $list ;
    do
      echo $var
    done | while read line ; do
      IFS=' '; key=$(echo "$line" | cut -d'=' -f1) ;
      value=$(echo "$line" | cut -d'=' -f2-) ;
      IFS='.' components=($key)
      IFS=' ';
      # section = input, filter, output
      section=${components[0]}
      grouping=${components[1]}
      property=${components[2]}
  
      if [ "${section}" != "${previous[0]}" ]; then
        if [ -n "${previous[1]}" ]; then
          echo "  }"
        fi
        if [ -n "${previous[0]}" ]; then
          echo "}"
        fi
        previous=()
        echo "${section} {"
      fi
  
      if [ "${grouping}" != "${previous[1]}" ]; then
        if [ -n "${previous[1]}" ]; then
          echo "  }"
        fi
        echo "  ${grouping} {"
      fi
  
      echo "    ${property} => ${value}"
  
      previous=(${components[*]});
    done
    echo "  }"
    echo "}"
  ) > $LOGSTASH_CONFIG_FILE
fi

# Download default conf if none present
if [ ! -f $LOGSTASH_CONFIG_FILE ]; then
    # Use the LOGSTASH_CONFIG_URL env var to download and use your
    # logstash.conf file.
    LOGSTASH_CONFIG_URL=${LOGSTASH_CONFIG_URL:-}

    # If you don't provide a value for the LOGSTASH_CONFIG_URL env
    # var, your install will default to our very basic logstash.conf file.
    if [ -n "$LOGSTASH_CONFIG_CONTENTS" ]; then
        echo "$LOGSTASH_CONFIG_CONTENTS" > $LOGSTASH_CONFIG_FILE
    else
        if [ -z "$LOGSTASH_CONFIG_URL" ]; then
            LOGSTASH_CONFIG_URL="https://gist.github.com/pblittle/8778567/raw/logstash.conf"
        fi

        echo "Downloading default configuration file ..."
        wget $LOGSTASH_CONFIG_URL -O $LOGSTASH_CONFIG_FILE
    fi

    # This magic will replace ES_HOST and ES_PORT in your logstash.conf
    # file if they exist with the IP and port dynamically generated
    # by docker. Take a look at the readme for more details.
    #
    # Note: Don't use this on a file mounting using a docker
    # volume, as the inode switch will cause `device or resource busy`
    # Instead download your file as normal
    sed -e "s/ES_HOST/${ES_PORT_9200_TCP_ADDR}/g" \
        -e "s/ES_PORT/${ES_PORT_9200_TCP_PORT}/g" \
        -i $LOGSTASH_CONFIG_FILE
fi

# Default path for SSL certificates
SSL_CERT_PATH="/opt/ssl"

# The default logstash-forwarder keys are insecure. Please do not
# use them in production. Set the LF_SSL_CERT_KEY_URL and LF_SSL_CERT_URL
# env vars to use your secure keys.
LF_SSL_CERT_KEY_URL=${LF_SSL_CERT_KEY_URL:-"https://gist.github.com/pblittle/8994708/raw/insecure-logstash-forwarder.key"}
LF_SSL_CERT_URL=${LF_SSL_CERT_URL:-"https://gist.github.com/pblittle/8994726/raw/insecure-logstash-forwarder.crt"}

# Your keys will be renamed to logstash-forwarder
LF_SSL_CERT_KEY_FILE="${SSL_CERT_PATH}/logstash-forwarder.key"
LF_SSL_CERT_FILE="${SSL_CERT_PATH}/logstash-forwarder.crt"

mkdir -p $SSL_CERT_PATH

# Download logstash-forwarder key and certificate
if [ ! -f $LF_SSL_CERT_FILE ]; then
  wget $LF_SSL_CERT_URL -O $LF_SSL_CERT_FILE
fi
if [ ! -f $LF_SSL_CERT_KEY_FILE ]; then
  wget $LF_SSL_CERT_KEY_URL -O $LF_SSL_CERT_KEY_FILE
fi

if [ -n "$LF_SSL_CERT_CONTENTS" ]; then
  echo "$LF_SSL_CERT_CONTENTS" > $LF_SSL_CERT_FILE
fi
if [ -n "$LF_SSL_CERT_KEY_CONTENTS" ]; then
  echo "$LF_SSL_CERT_KEY_CONTENTS" > $LF_SSL_CERT_KEY_FILE
fi

# Fire up logstash!
exec /opt/logstash/bin/logstash \
    agent \
    --config $LOGSTASH_CONFIG_FILE \
    -- \
    web

